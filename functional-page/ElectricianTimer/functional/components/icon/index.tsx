/* eslint-disable react/no-unknown-property */
import React, { CSSProperties, useMemo } from 'react';
import Svg from '@ray-js/svg';
import { rpx2pxNum } from '../../utils';
import './index.module.less';

const icons = {
  back: 'M11.5472 3.38631C11.1567 2.99578 10.5235 2.99578 10.133 3.38631L2.35481 11.1645C1.96428 11.555 1.96428 12.1882 2.35481 12.5787L10.133 20.3569C10.5235 20.7474 11.1567 20.7474 11.5472 20.3569C11.9377 19.9663 11.9377 19.3332 11.5472 18.9427L4.47613 11.8716L11.5472 4.80052C11.9377 4.41 11.9377 3.77683 11.5472 3.38631Z',
  close:
    'M6.67781625,5.2636025 C6.32634625,4.9121325 5.75649625,4.9121325 5.40502625,5.2636025 L5.26360625,5.4050225 C4.91213625,5.7564925 4.91212625,6.3263425 5.26360625,6.6778125 L10.9911663,12.4053825 L5.26360625,18.1329825 C4.91213625,18.4843825 4.91213625,19.0542825 5.26360625,19.4057825 L5.40502625,19.5471825 C5.75649625,19.8986825 6.32634625,19.8986825 6.67781625,19.5471825 L12.4053363,13.8195825 L18.1329363,19.5471825 C18.4844363,19.8986825 19.0542363,19.8986825 19.4057363,19.5471825 L19.5471363,19.4057825 C19.8986363,19.0542825 19.8986363,18.4843825 19.5471363,18.1329825 L13.8196363,12.4053825 L19.5471363,6.6778125 C19.8986363,6.3263425 19.8986363,5.7564925 19.5471363,5.4050225 L19.4057363,5.2636025 C19.0542363,4.9121325 18.4844363,4.9121325 18.1329363,5.2636025 L12.4053363,10.9911725 L6.67781625,5.2636025 Z',
  arrow:
    'M8.44031952,3.50074279 C8.6909851,3.21974007 9.10559317,3.171837 9.4111385,3.37261132 L9.49925721,3.44031952 L17.9227239,10.9543862 C18.2291873,11.2277637 18.2547259,11.6899272 17.9993397,11.994769 L17.9227239,12.0737471 L9.49925721,19.5878138 C9.19015421,19.863546 8.71605166,19.8364935 8.44031952,19.5273905 C8.18965394,19.2463878 8.18922353,18.8290218 8.42345054,18.5482978 L8.50074279,18.4684529 L16.297,11.514 L8.50074279,4.55968048 C8.21974007,4.3090149 8.171837,3.89440683 8.37261132,3.5888615 L8.44031952,3.50074279 Z',
  selected:
    'M16.9797799,8.97977994 C17.1750421,8.7845178 17.4916246,8.7845178 17.6868867,8.97977994 C17.8604531,9.15334629 17.8797382,9.4227707 17.7447422,9.61763884 L17.6868867,9.68688672 L11.0202201,16.3535534 C10.8466537,16.5271197 10.5772293,16.5464049 10.3823612,16.4114088 L10.3131133,16.3535534 L6.31311328,12.3535534 C6.11785113,12.1582912 6.11785113,11.8417088 6.31311328,11.6464466 C6.48667963,11.4728803 6.75610403,11.4535951 6.95097217,11.5885912 L7.02022006,11.6464466 L10.666,15.292 L16.9797799,8.97977994 Z',
  right:
    'M13,0 C19.0751322,-1.11598369e-15 24,4.92486775 24,11 L24,13 C24,19.0751322 19.0751322,24 13,24 L11,24 C4.92486775,24 7.43989126e-16,19.0751322 0,13 L0,11 C-7.43989126e-16,4.92486775 4.92486775,1.11598369e-15 11,0 L13,0 Z M18.3773447,8.82196436 C17.947768,8.39238764 17.2512865,8.39238764 16.8217098,8.82196436 L16.8217098,8.82196436 L10.399,15.244 L7.17732916,12.0219379 L7.08138735,11.9364597 C6.64962227,11.5945462 6.02059198,11.6230305 5.62169424,12.0219181 C5.19211206,12.4514894 5.19210321,13.1479709 5.62167448,13.577553 L5.62167448,13.577553 L9.0559872,17.011953 L9.18378082,17.1287304 C9.93032834,17.7515435 11.0421747,17.7126225 11.7428996,17.0120444 L11.7428996,17.0120444 L18.3773447,10.3775993 L18.4628217,10.2816564 C18.8047297,9.84988696 18.7762374,9.22085703 18.3773447,8.82196436 Z',
  remove:
    'M19,7.5 L19,19 C19,20.1046 18.1046,21 17,21 L7,21 C5.89543,21 5,20.1046 5,19 L5,7.5 L19,7.5 Z M10,11 C9.48716,11 9.06449,11.38604 9.00673,11.88338 L9,12 L9,16 C9,16.5523 9.44772,17 10,17 C10.51284,17 10.93551,16.614 10.99327,16.1166 L11,16 L11,12 C11,11.44771 10.55228,11 10,11 Z M14,11 C13.48716,11 13.06449,11.38604 13.00673,11.88338 L13,12 L13,16 C13,16.5523 13.44771,17 14,17 C14.5128,17 14.9355,16.614 14.9933,16.1166 L15,16 L15,12 C15,11.44771 14.5523,11 14,11 Z M13.28571,3 C13.83766,3 14.2852,3.447169 14.2857,3.998989 L18.75,4 C19.4404,4 20,4.55964 20,5.25 C20,5.94036 19.4404,6.5 18.75,6.5 L5.25,6.5 C4.559644,6.5 4,5.94036 4,5.25 C4,4.55964 4.559644,4 5.25,4 L9.714,3.999 L9.72101,3.883379 C9.77878,3.38604 10.20145,3 10.71429,3 L13.28571,3 Z',
  countdown:
    'M16.3088678,18 L8.00117545,18 L8.00117545,16.6153846 C7.94713657,14.3212788 9.76306961,12.4177314 12.0571755,12.3636924 C14.3512813,12.3096535 16.2548288,14.1255865 16.3088678,16.4196923 L16.3088678,18 L16.3088678,18 Z M11.2513293,14.0307692 C11.189461,14.0308882 11.1282481,14.0434447 11.0713293,14.0676923 C10.304895,14.3921827 9.72566408,15.0450044 9.49471392,15.8446154 C9.44244218,16.0048765 9.48170017,16.1808879 9.59711966,16.3037468 C9.71253916,16.4266057 9.88575873,16.4767672 10.0489686,16.4345947 C10.2121784,16.3924222 10.3394144,16.2646247 10.3808678,16.1012308 C10.5380276,15.5693788 10.923671,15.1350226 11.4331755,14.916 C11.6368757,14.8305094 11.7514333,14.6126623 11.7064222,14.3963836 C11.661411,14.180105 11.4694541,14.0260486 11.2485601,14.0289231 L11.2513293,14.0307692 Z M12.1550216,11.5384615 C9.86197014,11.5359179 8.00371905,9.67766684 8.00117545,7.38461538 L8.00117545,6 L16.3088678,6 L16.3088678,7.38461538 C16.3063242,9.67766684 14.4480731,11.5359179 12.1550216,11.5384615 Z',
  cycle:
    'M7.33333333,12 C7.70153333,12 8,12.2984667 8,12.6666667 C8,13.7318 8.8326,14.6024667 9.88246667,14.6632667 L9.88246667,14.6632667 L10,14.6666667 L15.0568667,14.6666667 L14.1952667,13.8047333 C13.9549333,13.5644 13.9364667,13.1862667 14.1398,12.9247333 L14.1398,12.9247333 L14.1952667,12.8619333 C14.4356,12.6216 14.8137333,12.6031333 15.0752667,12.8064667 L15.0752667,12.8064667 L15.1380667,12.8619333 L17.1380667,14.8619333 C17.3784,15.1022667 17.3968667,15.4804 17.1935333,15.7419333 L17.1935333,15.7419333 L17.1380667,15.8047333 L15.1380667,17.8047333 C14.8777333,18.0650667 14.4556,18.0650667 14.1952667,17.8047333 C13.9549333,17.5644 13.9364667,17.1862667 14.1398,16.9247333 L14.1398,16.9247333 L14.1952667,16.8619333 L15.0568667,16 L10,16 C8.15906667,16 6.66666667,14.5076 6.66666667,12.6666667 C6.66666667,12.2984667 6.96513333,12 7.33333333,12 Z M8.86193333,6.86193333 C9.12226667,6.60158 9.5444,6.60158 9.80473333,6.86193333 C10.0450667,7.10226667 10.0635333,7.4804 9.8602,7.74193333 L9.8602,7.74193333 L9.80473333,7.80473333 L8.94313333,8.66666833 L14,8.66666833 C15.8409333,8.66666833 17.3333333,10.1590667 17.3333333,12 C17.3333333,12.3682 17.0348667,12.6666683 16.6666669,12.6666683 C16.2984667,12.6666683 16,12.3682 16,12 C16,10.9348667 15.1674,10.0642 14.1175333,10.0034 L14.1175333,10.0034 L14,10 L8.94313333,10 L9.80473333,10.8619333 C10.0450667,11.1022667 10.0635333,11.4804 9.8602,11.7419333 L9.8602,11.7419333 L9.80473333,11.8047333 C9.5644,12.0450667 9.18626667,12.0635333 8.92473333,11.8602 L8.92473333,11.8602 L8.86193333,11.8047333 L6.86193333,9.80473333 C6.62160667,9.5644 6.60312,9.18626667 6.80646667,8.92473333 L6.80646667,8.92473333 L6.86193333,8.86193333 Z',
  inching:
    'M11.8333333,6 C8.61166667,6 6,8.61166667 6,11.8333333 C6,15.055 8.61166667,17.6666667 11.8333333,17.6666667 C15.055,17.6666667 17.6666667,15.055 17.6666667,11.8333333 C17.6666667,8.61166667 15.055,6 11.8333333,6 Z M11.8333333,7 C14.5027333,7 16.6666667,9.16393333 16.6666667,11.8333333 C16.6666667,14.5027333 14.5027333,16.6666667 11.8333333,16.6666667 C9.16393333,16.6666667 7,14.5027333 7,11.8333333 C7,9.16393333 9.16393333,7 11.8333333,7 Z M11.8333333,11.8333333 L11.8333333,7.83333333 C14.0424667,7.83333333 15.8333333,9.6242 15.8333333,11.8333333 L11.8333333,11.8333333 Z',
  normal:
    'M12,17.3333333 C14.9455333,17.3333333 17.3333333,14.9455333 17.3333333,12 C17.3333333,9.05446667 14.9455333,6.66666667 12,6.66666667 C9.05446667,6.66666667 6.66666667,9.05446667 6.66666667,12 C6.66666667,14.9455333 9.05446667,17.3333333 12,17.3333333 Z M12.6314667,9.38986667 C12.6021333,9.14353333 12.3874667,8.9524 12.127,8.9524 C11.8464667,8.9524 11.6190667,9.17413333 11.6190667,9.4476 L11.6190667,11.9238 L11.6225333,11.9817333 C11.6386667,12.1155333 11.7103333,12.2381333 11.8222,12.32 L13.8539333,13.8056667 L13.9072667,13.8398667 C14.1264667,13.9619333 14.4096667,13.9086 14.5650667,13.7066667 L14.6001333,13.6546 C14.7253333,13.4409333 14.6706,13.1648 14.4634667,13.0133333 L12.6349333,11.6762 L12.6349333,9.4476 L12.6314667,9.38986667 Z',
  random:
    'M10.6666667,5.83333333 C10.6666667,6.10947333 10.8905333,6.33333333 11.1666667,6.33333333 L12.8333333,6.33333333 C13.1094667,6.33333333 13.3333333,6.10947333 13.3333333,5.83333333 C13.3333333,5.55719333 13.1094667,5.33333333 12.8333333,5.33333333 L11.1666667,5.33333333 C10.8905333,5.33333333 10.6666667,5.55719333 10.6666667,5.83333333 Z M6.66666667,12.6666667 C6.66666667,15.6122 9.05446667,18 12,18 C14.9455333,18 17.3333333,15.6122 17.3333333,12.6666667 C17.3333333,11.3739333 16.8734,10.1886667 16.1082667,9.26546667 L16.6666667,8.70713333 C16.8619333,8.51186667 16.8619333,8.19526667 16.6666667,8 C16.4714,7.80473333 16.1548,7.80473333 15.9595333,8 L15.4012,8.5584 C14.478,7.79326667 13.2927333,7.33333333 12,7.33333333 C9.05446667,7.33333333 6.66666667,9.72113333 6.66666667,12.6666667 Z M12,9.33333333 C11.7238667,9.33333333 11.5,9.5572 11.5,9.83333333 L11.5,12.1666667 C11.5,12.4428 11.7238667,12.6666667 12,12.6666667 C12.2761333,12.6666667 12.5,12.4428 12.5,12.1666667 L12.5,9.83333333 C12.5,9.5572 12.2761333,9.33333333 12,9.33333333 Z',
  sunrise:
    'M12.002,13.3333333 C12.1306667,13.3337333 12.2507333,13.3705333 12.3524,13.434 L12.3524,13.434 L15.6763333,15.4283333 C15.9920667,15.6178 16.0944667,16.0272667 15.905,16.343 C15.7291333,16.6361333 15.3634667,16.7454 15.0593333,16.6078 L15.0593333,16.6078 L14.9903333,16.5716667 L12.6666667,15.1773333 L12.6666667,18.6666667 C12.6666667,19.0348667 12.3682,19.3333333 12,19.3333333 C11.6581333,19.3333333 11.3763333,19.076 11.3378667,18.7444 L11.3378667,18.7444 L11.3333333,18.6666667 L11.3333333,15.1773333 L9.00966667,16.5716667 C8.71653333,16.7475333 8.34246667,16.6718667 8.13886667,16.4073333 L8.13886667,16.4073333 L8.095,16.343 C7.91913333,16.0498 7.9948,15.6758 8.25933333,15.4722 L8.25933333,15.4722 L8.32366667,15.4283333 L11.6476,13.434 Z M12,8 C14.209139,8 16,8.8954305 16,10 C16,10.512855 15.613931,10.9806244 14.9791791,11.334615 L18,11.3333333 C18.3681898,11.3333333 18.6666667,11.6318102 18.6666667,12 C18.6666667,12.3681898 18.3681898,12.6666667 18,12.6666667 L6,12.6666667 C5.63181017,12.6666667 5.33333333,12.3681898 5.33333333,12 C5.33333333,11.6318102 5.63181017,11.3333333 6,11.3333333 L9.02082086,11.334615 C8.38606904,10.9806244 8,10.512855 8,10 C8,8.8954305 9.790861,8 12,8 Z M16.7140712,7.28593785 C16.9744207,7.54628738 16.9744207,7.96839737 16.7140712,8.2287469 L16.2426667,8.70015142 C15.9823171,8.96050094 15.5602072,8.96050094 15.2998576,8.70015142 C15.0395081,8.43980189 15.0395081,8.0176919 15.2998576,7.75734237 L15.7712621,7.28593785 C16.0316117,7.02558833 16.4537217,7.02558833 16.7140712,7.28593785 Z M8.22872429,7.28592429 L8.70012881,7.75732881 C8.96047834,8.01767834 8.96047834,8.43978833 8.70012881,8.70013785 C8.43977928,8.96048738 8.0176693,8.96048738 7.75731977,8.70013785 L7.28591525,8.22873333 C7.02556572,7.96838381 7.02556572,7.54627382 7.28591525,7.28592429 C7.54626478,7.02557476 7.96837476,7.02557476 8.22872429,7.28592429 Z M12,5.33333333 C12.3681898,5.33333333 12.6666667,5.63181017 12.6666667,6 L12.6666667,6.66666667 C12.6666667,7.0348565 12.3681898,7.33333333 12,7.33333333 C11.6318102,7.33333333 11.3333333,7.0348565 11.3333333,6.66666667 L11.3333333,6 C11.3333333,5.63181017 11.6318102,5.33333333 12,5.33333333 Z',
  sunset:
    'M13,13.3333333 C13.3682,13.3333333 13.6666667,13.6318 13.6666667,14 L13.6666667,17.4893333 L15.9903333,16.095 L16.0593333,16.0588667 C16.3634667,15.9212667 16.7291333,16.0305333 16.905,16.3236667 C17.0944667,16.6394 16.9920667,17.0488667 16.6763333,17.2383333 L13.3524,19.2326667 C13.2507333,19.2961333 13.1306667,19.3329333 13.002,19.3333333 L12.6476,19.2326667 L9.32366667,17.2383333 L9.25933333,17.1944667 C8.9948,16.9908667 8.91913333,16.6168667 9.095,16.3236667 L9.13886667,16.2593333 C9.34246667,15.9948 9.71653333,15.9191333 10.0096667,16.095 L12.3333333,17.4893333 L12.3333333,14 L12.3378667,13.9222667 C12.3763333,13.5906667 12.6581333,13.3333333 13,13.3333333 Z M13,8 C15.209139,8 17,8.8954305 17,10 C17,10.512855 16.613931,10.9806244 15.9791791,11.334615 L19,11.3333333 C19.3681898,11.3333333 19.6666667,11.6318102 19.6666667,12 C19.6666667,12.3681898 19.3681898,12.6666667 19,12.6666667 L7,12.6666667 C6.63181017,12.6666667 6.33333333,12.3681898 6.33333333,12 C6.33333333,11.6318102 6.63181017,11.3333333 7,11.3333333 L10.0208209,11.334615 C9.38606904,10.9806244 9,10.512855 9,10 C9,8.8954305 10.790861,8 13,8 Z M17.7140712,7.28593785 C17.9744207,7.54628738 17.9744207,7.96839737 17.7140712,8.2287469 L17.2426667,8.70015142 C16.9823171,8.96050094 16.5602072,8.96050094 16.2998576,8.70015142 C16.0395081,8.43980189 16.0395081,8.0176919 16.2998576,7.75734237 L16.7712621,7.28593785 C17.0316117,7.02558833 17.4537217,7.02558833 17.7140712,7.28593785 Z M9.22872429,7.28592429 L9.70012881,7.75732881 C9.96047834,8.01767834 9.96047834,8.43978833 9.70012881,8.70013785 C9.43977928,8.96048738 9.0176693,8.96048738 8.75731977,8.70013785 L8.28591525,8.22873333 C8.02556572,7.96838381 8.02556572,7.54627382 8.28591525,7.28592429 C8.54626478,7.02557476 8.96837476,7.02557476 9.22872429,7.28592429 Z M13,5.33333333 C13.3681898,5.33333333 13.6666667,5.63181017 13.6666667,6 L13.6666667,6.66666667 C13.6666667,7.0348565 13.3681898,7.33333333 13,7.33333333 C12.6318102,7.33333333 12.3333333,7.0348565 12.3333333,6.66666667 L12.3333333,6 C12.3333333,5.63181017 12.6318102,5.33333333 13,5.33333333 Z',

  // 1024*1024
  error:
    'M512 0c282.7776 0 512 229.2224 512 512s-229.2224 512-512 512S0 794.7776 0 512 229.2224 0 512 0zM403.4048 330.9568A51.2 51.2 0 0 0 330.9568 403.456l108.6464 108.544-108.6464 108.6464a51.2 51.2 0 0 0 72.448 72.448L512 584.3968l108.5952 108.6464a51.2 51.2 0 0 0 72.448-72.448L584.3968 512l108.6464-108.5952a51.2 51.2 0 1 0-72.448-72.448l-108.544 108.5952z',
  // 1024*1024
  warning:
    'M512 0c282.7776 0 512 229.2224 512 512s-229.2224 512-512 512S0 794.7776 0 512 229.2224 0 512 0z m0 665.6a76.8 76.8 0 1 0 0 153.6 76.8 76.8 0 0 0 0-153.6z m0-460.8a72.192 72.192 0 0 0-71.9872 76.6464l17.6128 281.856a54.4768 54.4768 0 0 0 108.7488 0l17.6128-281.856A72.192 72.192 0 0 0 512 204.8z',
  correct:
    'M512 0c282.7776 0 512 229.2224 512 512s-229.2224 512-512 512S0 794.7776 0 512 229.2224 0 512 0z m279.04 362.8032a51.2 51.2 0 0 0-72.3968 0l-253.44 253.3888-108.6464-108.544a51.2 51.2 0 0 0-72.3968 72.3456l144.2304 144.1792 0.6144 0.6656a51.2 51.2 0 0 0 72.3968 0L791.04 435.2a51.2 51.2 0 0 0 0-72.3968z',
};

const shadowInsetDom = (
  <filter x="-13.7%" y="-9.1%" width="126.8%" height="116.2%" filterUnits="objectBoundingBox" id="insert">
    <feGaussianBlur stdDeviation="1.5" in="SourceAlpha" result="blurInner" />
    <feOffset dx="1" dy="1" in="blurInner" result="offsetInner" />
    <feComposite in="offsetInner" in2="SourceAlpha" operator="arithmetic" k2="-1" k3="1" result="shadowInnerInner1" />
    <feColorMatrix values="0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.2 0" type="matrix" in="shadowInnerInner1" />
  </filter>
);

export type IconType = keyof typeof icons;

export interface Props extends React.SVGProps<SVGPathElement> {
  type?: IconType;
  d?: string;
  viewBox?: string;
  size?: string | number;
  width?: string | number;
  height?: string | number;
  shadowInset?: boolean;
  linearGradient?: {
    x1?: number | string;
    x2?: number | string;
    y1?: number | string;
    y2?: number | string;
    stopColor: { color: string; offset: number | string }[];
  };
}

export const Icon: React.FC<Props> = ({
  style,
  className,
  d,
  type,
  viewBox,
  size,
  width,
  height,
  linearGradient,
  fill,
  stroke,
  shadowInset,
  ...pathProps
}) => {
  const linear = useMemo(() => {
    if (linearGradient) {
      return (
        <linearGradient
          id="linearGradient"
          x1={linearGradient.x1}
          y1={linearGradient.y1}
          x2={linearGradient.x2}
          y2={linearGradient.y2}
          gradientUnits="userSpaceOnUse"
        >
          {linearGradient.stopColor.map((item) => {
            // eslint-disable-next-line react/no-unknown-property
            return <stop key={item.offset} stop-color={item.color} offset={item.offset} />;
          })}
        </linearGradient>
      );
    }
    return null;
  }, [linearGradient]);

  const svgProps = useMemo(() => {
    const svgWidth = Math.round(rpx2pxNum(width || size));
    const svgHeight = Math.round(rpx2pxNum(height || size));
    const svgStyle: CSSProperties = {
      width: `${svgWidth}px`,
      height: `${svgHeight}px`,
      ...style,
    };
    return {
      style: svgStyle,
      width: svgWidth.toString(),
      height: svgHeight.toString(),
    };
  }, [width, height, size, style]);

  return (
    <Svg style={svgProps.style} className={className} viewBox={viewBox} width={svgProps.width} height={svgProps.height}>
      <defs>
        <path id="path" d={d || (type && icons[type])} />
        {linear}
        {shadowInset && shadowInsetDom}
      </defs>
      <g fill-rule="evenodd">
        <use
          fill={linear && fill !== 'transparent' ? 'url(#linearGradient)' : fill || '#ef550d'}
          stroke={linear && stroke ? 'url(#linearGradient)' : stroke}
          {...pathProps}
          // @ts-expect-error
          xlink:href="#path"
        />
        {/* @ts-expect-error */}
        {shadowInset && <use fill="black" fillOpacity="1" filter="url(#insert)" xlink:Href="#path" />}
      </g>
    </Svg>
  );
};

Icon.defaultProps = {
  type: undefined,
  d: '',
  viewBox: '0 0 24 24',
  shadowInset: false,
  size: '48rpx',
  width: null,
  height: null,
  linearGradient: null,
};
