// ../src/components/color.js
var limit = (number, min, max) => Math.min(max, Math.max(min, number));
function hsv2rgb() {
  let h = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
  let s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  let v = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  let a = arguments.length > 3 ? arguments[3] : void 0;
  const hsb = [h, s, v].map((bit, i) => {
    let _bit = bit;
    if (_bit)
      _bit = parseFloat(_bit.toString());
    if (i === 0) {
      _bit %= 360;
      const res = _bit < 0 ? _bit + 360 : _bit;
      return res;
    }
    return limit(Math.round(bit), 0, 100);
  });
  const br = Math.round(hsb[2] / 100 * 255);
  if (hsb[1] === 0)
    return [br, br, br];
  const hue = hsb[0];
  const f = hue % 60;
  const p = Math.round(hsb[2] * (100 - hsb[1]) / 1e4 * 255);
  const q = Math.round(hsb[2] * (6e3 - hsb[1] * f) / 6e5 * 255);
  const t = Math.round(hsb[2] * (6e3 - hsb[1] * (60 - f)) / 6e5 * 255);
  let rgb;
  switch (Math.floor(hue / 60)) {
    case 0:
      rgb = [br, t, p];
      break;
    case 1:
      rgb = [q, br, p];
      break;
    case 2:
      rgb = [p, br, t];
      break;
    case 3:
      rgb = [p, q, br];
      break;
    case 4:
      rgb = [t, p, br];
      break;
    default:
      rgb = [br, p, q];
      break;
  }
  if (a !== void 0) {
    rgb.push(limit(Number(a), 0, 1));
  }
  return rgb;
}
function rgb2hsv() {
  let r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
  let g = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  let b = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  let red = parseFloat(r.toString());
  let green = parseFloat(g.toString());
  let blue = parseFloat(b.toString());
  if (red < 0)
    red = 0;
  if (green < 0)
    green = 0;
  if (blue < 0)
    blue = 0;
  if (red > 255)
    red = 255;
  if (green > 255)
    green = 255;
  if (blue > 255)
    blue = 255;
  red /= 255;
  green /= 255;
  blue /= 255;
  const M = Math.max(red, green, blue);
  const m = Math.min(red, green, blue);
  const C = M - m;
  let h;
  let s;
  let v;
  if (C === 0)
    h = 0;
  else if (M === red)
    h = (green - blue) / C % 6;
  else if (M === green)
    h = (blue - red) / C + 2;
  else
    h = (red - green) / C + 4;
  h *= 60;
  if (h < 0)
    h += 360;
  v = M;
  if (C === 0)
    s = 0;
  else
    s = C / v;
  s *= 100;
  v *= 100;
  return [h, s, v];
}

// ../src/components/utils.js
function extractColors(pixels, numColors) {
  const pre = Math.round(pixels.length / 278e3);
  const sampleFrequency = Math.max(1, pre);
  let data = [];
  for (let i = 0; i < pixels.length; i += sampleFrequency) {
    data.push({ r: pixels[i], g: pixels[i + 1], b: pixels[i + 2] });
  }
  const colors = kmeans(data, numColors);
  const maxSColors = colors.map((item) => {
    const rgb = item.replace("rgba(", "").replace("rgb(", "").replace(")", "").split(",").map((lit) => Number(lit.trim()));
    const hsv = rgb2hsv(...rgb);
    console.log(hsv, "--hsv");
    const color = hsv2rgb(isNaN(hsv.h) ? 0 : hsv.h, hsv.s, hsv.v > 0.4 ? hsv.v + 0.15 : 0.4);
    return `rgb(${color.r}, ${color.g}, ${color.b})`;
  });
  return maxSColors;
}
function kmeans(data, k) {
  const centroids = initializeCentroids(data, k);
  let clusters = new Array(k);
  let oldCentroids;
  let changed = true;
  while (changed) {
    clusters = Array.from({ length: k }, () => []);
    data.forEach((point) => {
      let closestCentroidIndex = -1;
      let minDistance = Infinity;
      centroids.forEach((centroid, index) => {
        const distance = euclideanDistance(point, centroid);
        if (distance < minDistance) {
          closestCentroidIndex = index;
          minDistance = distance;
        }
      });
      clusters[closestCentroidIndex].push(point);
    });
    oldCentroids = centroids.slice();
    centroids.forEach((centroid, index) => {
      if (clusters[index].length > 0) {
        const mean = calculateMean(clusters[index]);
        centroids[index] = mean;
      }
    });
    changed = !centroidsEqual(oldCentroids, centroids);
  }
  return centroids.map((centroid) => `rgb(${centroid.r}, ${centroid.g}, ${centroid.b})`);
}
function initializeCentroids(data, k) {
  const centroids = [];
  for (let i = 0; i < k; i++) {
    const randIndex = Math.floor(Math.random() * data.length);
    centroids.push({ ...data[randIndex] });
  }
  return centroids;
}
function euclideanDistance(a, b) {
  return Math.sqrt((a.r - b.r) ** 2 + (a.g - b.g) ** 2 + (a.b - b.b) ** 2);
}
function calculateMean(cluster) {
  let r = 0;
  let g = 0;
  let b = 0;
  cluster.forEach((point) => {
    r += point.r;
    g += point.g;
    b += point.b;
  });
  const { length } = cluster;
  return { r: Math.round(r / length), g: Math.round(g / length), b: Math.round(b / length) };
}
function centroidsEqual(oldCentroids, newCentroids) {
  for (let i = 0; i < oldCentroids.length; i++) {
    if (oldCentroids[i].r !== newCentroids[i].r || oldCentroids[i].g !== newCentroids[i].g || oldCentroids[i].b !== newCentroids[i].b) {
      return false;
    }
  }
  return true;
}

// ../src/components/index.rjs
var components_default = Render({
  ctx: null,
  canvas: null,
  preId: "",
  /**
   * @name: 渲染灯带动画
   * @desc:
   * @param {*} props
   * @return {*}
   */
  async renderLight({ src, canvasId, pickNum }) {
    if (!src)
      return;
    if (!this.ctx || this.preId !== canvasId) {
      console.log("\u{1F680} get the Canvas ctx");
      this.canvas = await getCanvasById(canvasId);
      this.ctx = this.canvas.getContext("2d");
      this.preId = canvasId;
    }
    this.getImage(src, pickNum);
  },
  getImage(src, pickNum) {
    const img = this.canvas.createImage();
    img.onload = () => {
      const width = img.width;
      const height = img.height;
      this.canvas.width = width;
      this.canvas.height = height;
      this.ctx.drawImage(img, 0, 0, width, height);
      const imageData = this.ctx.getImageData(0, 0, width, height);
      const pixels = imageData.data;
      const colors = extractColors(pixels, pickNum);
      this.callMethod("getColors", {
        colors
      });
    };
    img.onerror = (e) => {
      console.log("\u274Crjs img.onerror", e, e.message);
    };
    img.src = src;
  }
});
export {
  components_default as default
};
//# sourceMappingURL=data:application/json;base64,
